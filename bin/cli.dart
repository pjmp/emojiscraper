library cli;

import 'dart:io' show File, exit;
import 'package:args/args.dart' show ArgParser, ArgResults;
import 'package:emojiscraper/emojiscraper.dart' as scraper;
import 'package:interact/interact.dart' show Select, Spinner, SpinnerState;

// generated by `dart run build_runner`
import './app_info.dart' as app_info;

part './options.dart';
part './commands.dart';

Future<void> run({required List<String> args}) async {
  try {
    final app = _generate(ArgParser());

    final cli = app.parse(args);

    if (_validFlagsOrOptionsPassed(cli)) {
      // show help
      if (cli['help']) {
        _help(app.usage);
      }

      // show version
      if (cli['version']) {
        _version();
      }

      // list versions
      if (cli['list']) {
        await _printAvailableVersions();
      }

      var edition = cli['edition'];

      final format = cli['format'],
          writeTo = cli['writeTo'],
          interactive = cli['interactive'];

      // if `--edition` is not passed
      if (edition == null) {
        final versionSpinner = _spinner('Fetching available versions ...');

        final versions = await scraper.fetchAvailableVersions();

        versionSpinner.done();

        // if `--interactive` is passed
        if (interactive == true) {
          // prompt user to select from available versions
          final selection = Select(
            prompt: 'Select version of emoji',
            options: versions,
          ).interact();

          edition = versions[selection];
        } else {
          // just select latest available version if `--interactive` is not passed
          edition = versions.first;
        }
      }

      final downloadSpinner = _spinner('Downloading ...');

      final data = await scraper.fetchEmojiData(edition);

      downloadSpinner.done();

      switch (writeTo) {
        case "path":
          String? emoji;
          File? file;

          switch (format) {
            case "json":
              file = await File('$edition-emoji-sequences.json').create();
              emoji = scraper.parseTextToJson(data);
              break;
            case "raw":
              file = await File('$edition-emoji-sequences.txt').create();
              emoji = data;
              break;
            default:
              _invalidState();
          }

          await file.writeAsString(emoji, flush: true);

          break;
        case "stdout":
          switch (format) {
            case "json":
              final json = scraper.parseTextToJson(data);
              print(json);
              break;
            case "raw":
              print(data);
              break;
            default:
              _invalidState();
          }
          break;
        default:
          _invalidState();
      }
    } else {
      _printNoArgsHelp();
    }
  } catch (e) {
    _printAllErrors(e);
  }
}
